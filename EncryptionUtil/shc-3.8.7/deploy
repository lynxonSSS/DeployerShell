#!/bin/sh

Help() {
   # Display Help
   echo
   echo
   echo "This tool helps in single command deloyment for any kind of technology."
   echo "The tool gets the project directory and based on user input identifies availability"
   echo "of git and then hard resets to latest head and then pulls the code."
   echo "Then it takes the command input by the user to deploy the project. "
   echo "Port is used only to kill the currently running project and it doesn't mean"
   echo "that the project will be started on any port entered."
   echo
   echo "Options:"
   echo
   echo "--help / -H        Print this Help."
   echo
   echo "-V / --version     Prints the version."
   echo "-d                 Specify the project root directory."
   echo "-p                 Specify the port to be killed."
   echo "-c                 Specify the command to be executed on the root directory specified."
   echo "-g                 Specify if git is configured or if pull is required."
   echo
   exit 0
}

displayVersion() {
    echo "1.0.1"
    exit 0
}

###############################################
# Essential functions required for deployment #
###############################################

# Fetch the directory of the project
goToDir() {
    cd $directory $directoryRead
    if [ $? -ne 0 ]; then
        echo Project directory is not found
        exit 1
    fi
}

# Command that is used to deploy the project
deploymentCommand() {
    $command $commandRead
}

# This command identifies if git exists
# if Git is available then resets hard and takes pull
# Then it runs the project
identifyGitAndDeploy() {
    if [[ "$isGitAvailable" == "Y" ]] | [[ "$isGitAvailable" == "y" ]] | [[ "$isGitAvailableRead" == "Y" ]] | [[ "$isGitAvailableRead" == "y" ]]; then
        git reset --hard
        if [ $? -ne 0 ] | [ $? -eq 0 ]; then
            git pull
            if [ $? -ne 0 ] | [ $? -eq 0 ]; then
                echo projectIsRunning1
                deploymentCommand
            else
                roject path incorrect
            fi
        fi
    else 
        echo projectIsRunning
	    deploymentCommand
    fi
}

if [[ "$1" == "-V" ]]; then
    displayVersion
elif [[ "$1" == "--version" ]]; then
    displayVersion
elif [ "$1" == "--help" ]; then
    Help
elif [ "$1" == "-H" ]; then
    Help
fi

while getopts d:p:g:c: flag
do
    case "${flag}" in
        d) directory=${OPTARG};;
        p) port=${OPTARG};;
        g) isGitAvailable=${OPTARG};;
        c) command=${OPTARG};;
        h) # display Help
         Help
         exit;;
    esac
done

###################################################
# Get the params from command ling args or prompt #
###################################################
  # For the directory
if [[ -z $directory ]]; then
    read -p "Enter your project path :" directoryRead
    goToDir
    echo Project path is added 
else 
    goToDir
    echo Project path is fetched
fi

  # For the port
if [[ -z $port ]]; then
    read -p "Enter the port on which the project is running :" portRead
    echo Port is set 
else 
    echo Port is fetched
fi

  # For the command to execute
if [[ -z $command ]]; then
    read -p "Enter the command you want to run :" commandRead
    echo Command is taken
else 
    echo Command is fetched
fi

  # For the availability of Git
if [[ -z $isGitAvailable ]]; then
    read -p "Is git available for pulling? (Expected answer in Y/n) :" isGitAvailableRead
    echo Git status input is added 
else
    echo Git status input is fetched
fi

#########################################
# Run the arguments with fetched params #
#########################################

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
	netstat -anp | grep $port $portRead
elif [[ "$OSTYPE" == "darwin"* ]]; then
	netstat -anv -p tcp | grep $port $portRead
elif [[ "$OSTYPE" == "cygwin" ]]; then
	netstat -anp | grep $port $portRead
elif [[ "$OSTYPE" == "msys" ]]; then
	netstat -a -n -o | find $port $portRead
elif [[ "$OSTYPE" == "win32" ]]; then
	netstat -aof | findstr : $port $portRead
elif [[ "$OSTYPE" == "freebsd"* ]]; then
	sockstat -4 -l | grep :$port $portRead
else
	netstat -anp | grep $port $portRead
fi

if [ $? -ne 0 ]; then
   echo Initialising auto restart of your project.
   echo ..............Deployment Begins Here..............

   npx kill-port $port --force
   if [ $? -ne 0 ] | [ $? -eq 0 ]; then
	identifyGitAndDeploy
   fi
else
   identifyGitAndDeploy  
fi