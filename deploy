#!/bin/sh

Help() {
   # Display Help
   echo "Add description of the script functions here."
   echo
   echo "Syntax: scriptTemplate [-g|h|v|V]"
   echo "options:"
   echo "g     Print the GPL license notification."
   echo "h     Print this Help."
   echo "v     Verbose mode."
   echo "V     Print software version and exit."
   echo
}

while getopts d:p:g:c:":h": flag
do
    case "${flag}" in
        d) directory=${OPTARG};;
        p) port=${OPTARG};;
        g) isGitAvailable=${OPTARG};;
        c) command=${OPTARG};;
        h) # display Help
         Help
         exit;;
        *) echo Please press deploy --help. 
           echo If you want to quit please press CTRL + C;;
    esac
done

###############################################
# Essential functions required for deployment #
###############################################

# Fetch the directory of the project
goToDir() {
    cd $directory
    if [ $? -ne 0 ]; then
        echo Project directory is not found
        exit 1
    fi
}

# Command that is used to deploy the project
deploymentCommand() {
    $command
}

# This command identifies if git exists
# if Git is available then resets hard and takes pull
# Then it runs the project
identifyGitAndDeploy() {
    if [ $isGitAvailable == "Y" ] | [ $isGitAvailable == "y" ]; then
        git reset --hard
        if [ $? -ne 0 ] | [ $? -eq 0 ]; then
            git pull
                if [ $? -ne 0 ] | [ $? -eq 0 ]; then
                echo projectIsRunning
            deploymentCommand
            else
            echo project path incorrect
                fi
        fi
    else 
        echo projectIsRunning
	    deploymentCommand
    fi
}

###################################################
# Get the params from command ling args or prompt #
###################################################
  # For the directory
if [$directory == ""]; then
    read -p "Enter your project path :" $directory
    goToDir
    echo Project path is added 
else 
    goToDir
    echo Project path is fetched
fi

  # For the port
if [$port == ""]; then
    read -p "Enter the port on which the project is running :" $port
    echo Port is set 
else 
    echo Port is fetched
fi

  # For the command to execute
if [$command == ""]; then
    read -p "Enter the command you want to run :" $command
    echo Command is taken
else 
    echo Command is fetched
fi

  # For the availability of Git
if [$isGitAvailable == ""]; then
    read -p "Is git available for pulling? (Expected answer in Y/N) :" $isGitAvailable
    echo Git status input is added 
else
    echo Git status input is fetched
fi

#########################################
# Run the arguments with fetched params #
#########################################

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
	netstat -anp | grep $port
elif [[ "$OSTYPE" == "darwin"* ]]; then
	netstat -ln | grep $port
elif [[ "$OSTYPE" == "cygwin" ]]; then
	netstat -anp | grep $port
elif [[ "$OSTYPE" == "msys" ]]; then
	netstat -a -n -o | find $port
elif [[ "$OSTYPE" == "win32" ]]; then
	netstat -aof | findstr : $port
elif [[ "$OSTYPE" == "freebsd"* ]]; then
	sockstat -4 -l | grep :$port
else
	netstat -anp | grep $port
fi

if [ $? -ne 0 ]; then
   echo Initialising auto restart of your project.
   echo ..............Deployment Begins Here..............

   npx kill-port $port --force
   if [ $? -ne 0 ] | [ $? -eq 0 ]; then
	identifyGitAndDeploy
   fi
else
   identifyGitAndDeploy  
fi